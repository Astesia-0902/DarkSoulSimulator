//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Player/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""0bc8014b-9088-4262-b204-40bad74a6279"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bc4f5f15-62bd-4990-928c-8e7ce484c575"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""12848426-5230-4976-a0ed-e1803a07c938"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fc00ca4c-b54d-4b02-b787-c1b1c71a93d6"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c4e6f9e-b9fa-4f2e-930b-9d52beea9f43"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1777eb87-c579-4e9a-aa2f-650e32b2931e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e258f764-bd6b-4959-ac92-2161a9e566ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d3f10ed5-33dd-473b-b365-cfed7aa3980c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""73e6f426-f9a3-40c3-a2d9-58559473c65a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bd2e816-eb7a-4ebc-8e7a-1cc7ab71354d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActions"",
            ""id"": ""8f01b663-e5fa-49cd-8767-1520c5b27e81"",
            ""actions"": [
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f432e09d-6738-494d-b51c-3307a46ba27e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Left Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""bc2ca12b-5b96-4a57-9331-ac2ded93c48a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRight"",
                    ""type"": ""Button"",
                    ""id"": ""73ec825f-1661-4152-9f49-9a2c1c5742aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d9e2204a-31ff-47af-8b99-1e73b0d8352e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""9f45b3d0-8fe5-4f8e-bd19-242cc3187bf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""729c8ba1-30dc-4c65-85e3-8cc52fae9979"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""718244b7-a292-48e5-8643-09f263fed808"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F"",
                    ""type"": ""Button"",
                    ""id"": ""1dcf3083-5504-401d-9c9c-08677e28baef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""fdb0f73b-5ec3-423e-8945-2bc2f5f396b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""0963c500-bc7c-4f43-8f75-3cd764a57661"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""5d5be13f-d18d-497d-8b9a-47023430857a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""94e62bd7-9b29-4851-b3ef-dbebcc096383"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Q"",
                    ""type"": ""Button"",
                    ""id"": ""d2f27c3f-4e5e-4bf7-b948-905926c3fcfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tab"",
                    ""type"": ""Button"",
                    ""id"": ""751e8621-a1da-404e-9bc7-5bdb19dfb04f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""10e9e0a9-d98f-4c2d-b45e-22f23a5a6c78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""7920cd40-c0d4-49da-a64c-2c6abe7b928c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftCtrl"",
                    ""type"": ""Button"",
                    ""id"": ""a977c10a-f0cf-4018-bd2a-dffe60a59e37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca45a147-1b67-4889-a27c-8e78e23b5ef5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9063cf5d-d112-4647-960d-f1b51a801ce1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fa3ba97-2886-4691-9f9a-ca90a5953bbe"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b46118d8-8524-4c37-979d-a7ced231cc54"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f7fb85c-831a-4a14-85ae-e600381f6b42"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c7ea9fd-9470-4b0b-a4e2-61cd0deda0f8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75bad609-6b96-4e59-af11-6da4a3a711ec"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60ff4518-cb44-4231-94b4-68e9caeeae8c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d4b6fc5-3fad-457d-b904-0866c26da38f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f922f8-7b2a-4711-a9c1-b436abbad465"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec942fba-7662-4fcc-b8ce-26cb54573a4a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98edec88-4e19-4423-8630-5577b5732e51"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee522316-50f1-4a3b-8621-bf80d2ec7a98"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1b005b2-944d-4083-88db-f63bacca893c"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30dce9a6-3515-4f7a-afb0-c383ea92825f"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2113bbb5-659a-4393-aa21-764670de71a0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Left Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48844ec1-b439-474b-9072-4bae07b75926"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftCtrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_MouseLeft = m_PlayerActions.FindAction("MouseLeft", throwIfNotFound: true);
        m_PlayerActions_MouseLeftPressed = m_PlayerActions.FindAction("Mouse Left Pressed", throwIfNotFound: true);
        m_PlayerActions_MouseRight = m_PlayerActions.FindAction("MouseRight", throwIfNotFound: true);
        m_PlayerActions_Up = m_PlayerActions.FindAction("Up", throwIfNotFound: true);
        m_PlayerActions_Down = m_PlayerActions.FindAction("Down", throwIfNotFound: true);
        m_PlayerActions_Left = m_PlayerActions.FindAction("Left", throwIfNotFound: true);
        m_PlayerActions_Right = m_PlayerActions.FindAction("Right", throwIfNotFound: true);
        m_PlayerActions_F = m_PlayerActions.FindAction("F", throwIfNotFound: true);
        m_PlayerActions_E = m_PlayerActions.FindAction("E", throwIfNotFound: true);
        m_PlayerActions_Roll = m_PlayerActions.FindAction("Roll", throwIfNotFound: true);
        m_PlayerActions_Sprint = m_PlayerActions.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerActions_Esc = m_PlayerActions.FindAction("Esc", throwIfNotFound: true);
        m_PlayerActions_Q = m_PlayerActions.FindAction("Q", throwIfNotFound: true);
        m_PlayerActions_Tab = m_PlayerActions.FindAction("Tab", throwIfNotFound: true);
        m_PlayerActions_Y = m_PlayerActions.FindAction("Y", throwIfNotFound: true);
        m_PlayerActions_Walk = m_PlayerActions.FindAction("Walk", throwIfNotFound: true);
        m_PlayerActions_LeftCtrl = m_PlayerActions.FindAction("LeftCtrl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Camera;
    public struct PlayerMovementActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerMovementActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Camera.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCamera;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_MouseLeft;
    private readonly InputAction m_PlayerActions_MouseLeftPressed;
    private readonly InputAction m_PlayerActions_MouseRight;
    private readonly InputAction m_PlayerActions_Up;
    private readonly InputAction m_PlayerActions_Down;
    private readonly InputAction m_PlayerActions_Left;
    private readonly InputAction m_PlayerActions_Right;
    private readonly InputAction m_PlayerActions_F;
    private readonly InputAction m_PlayerActions_E;
    private readonly InputAction m_PlayerActions_Roll;
    private readonly InputAction m_PlayerActions_Sprint;
    private readonly InputAction m_PlayerActions_Esc;
    private readonly InputAction m_PlayerActions_Q;
    private readonly InputAction m_PlayerActions_Tab;
    private readonly InputAction m_PlayerActions_Y;
    private readonly InputAction m_PlayerActions_Walk;
    private readonly InputAction m_PlayerActions_LeftCtrl;
    public struct PlayerActionsActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerActionsActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeft => m_Wrapper.m_PlayerActions_MouseLeft;
        public InputAction @MouseLeftPressed => m_Wrapper.m_PlayerActions_MouseLeftPressed;
        public InputAction @MouseRight => m_Wrapper.m_PlayerActions_MouseRight;
        public InputAction @Up => m_Wrapper.m_PlayerActions_Up;
        public InputAction @Down => m_Wrapper.m_PlayerActions_Down;
        public InputAction @Left => m_Wrapper.m_PlayerActions_Left;
        public InputAction @Right => m_Wrapper.m_PlayerActions_Right;
        public InputAction @F => m_Wrapper.m_PlayerActions_F;
        public InputAction @E => m_Wrapper.m_PlayerActions_E;
        public InputAction @Roll => m_Wrapper.m_PlayerActions_Roll;
        public InputAction @Sprint => m_Wrapper.m_PlayerActions_Sprint;
        public InputAction @Esc => m_Wrapper.m_PlayerActions_Esc;
        public InputAction @Q => m_Wrapper.m_PlayerActions_Q;
        public InputAction @Tab => m_Wrapper.m_PlayerActions_Tab;
        public InputAction @Y => m_Wrapper.m_PlayerActions_Y;
        public InputAction @Walk => m_Wrapper.m_PlayerActions_Walk;
        public InputAction @LeftCtrl => m_Wrapper.m_PlayerActions_LeftCtrl;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @MouseLeft.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseLeft;
                @MouseLeft.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseLeft;
                @MouseLeft.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseLeft;
                @MouseLeftPressed.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseLeftPressed;
                @MouseLeftPressed.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseLeftPressed;
                @MouseLeftPressed.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseLeftPressed;
                @MouseRight.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseRight;
                @MouseRight.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseRight;
                @MouseRight.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMouseRight;
                @Up.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight;
                @F.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnF;
                @F.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnF;
                @F.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnF;
                @E.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnE;
                @E.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnE;
                @E.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnE;
                @Roll.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Sprint.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSprint;
                @Esc.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnEsc;
                @Q.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnQ;
                @Q.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnQ;
                @Q.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnQ;
                @Tab.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTab;
                @Tab.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTab;
                @Tab.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTab;
                @Y.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnY;
                @Y.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnY;
                @Y.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnY;
                @Walk.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnWalk;
                @LeftCtrl.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftCtrl;
                @LeftCtrl.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftCtrl;
                @LeftCtrl.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftCtrl;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLeft.started += instance.OnMouseLeft;
                @MouseLeft.performed += instance.OnMouseLeft;
                @MouseLeft.canceled += instance.OnMouseLeft;
                @MouseLeftPressed.started += instance.OnMouseLeftPressed;
                @MouseLeftPressed.performed += instance.OnMouseLeftPressed;
                @MouseLeftPressed.canceled += instance.OnMouseLeftPressed;
                @MouseRight.started += instance.OnMouseRight;
                @MouseRight.performed += instance.OnMouseRight;
                @MouseRight.canceled += instance.OnMouseRight;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @F.started += instance.OnF;
                @F.performed += instance.OnF;
                @F.canceled += instance.OnF;
                @E.started += instance.OnE;
                @E.performed += instance.OnE;
                @E.canceled += instance.OnE;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
                @Q.started += instance.OnQ;
                @Q.performed += instance.OnQ;
                @Q.canceled += instance.OnQ;
                @Tab.started += instance.OnTab;
                @Tab.performed += instance.OnTab;
                @Tab.canceled += instance.OnTab;
                @Y.started += instance.OnY;
                @Y.performed += instance.OnY;
                @Y.canceled += instance.OnY;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @LeftCtrl.started += instance.OnLeftCtrl;
                @LeftCtrl.performed += instance.OnLeftCtrl;
                @LeftCtrl.canceled += instance.OnLeftCtrl;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnMouseLeft(InputAction.CallbackContext context);
        void OnMouseLeftPressed(InputAction.CallbackContext context);
        void OnMouseRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnF(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
        void OnQ(InputAction.CallbackContext context);
        void OnTab(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnLeftCtrl(InputAction.CallbackContext context);
    }
}
